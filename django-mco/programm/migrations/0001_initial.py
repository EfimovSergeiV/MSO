# Generated by Django 4.0.5 on 2022-06-02 09:41

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CorrectorParamModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Параметры корректора',
                'verbose_name_plural': 'Параметры корректора',
            },
        ),
        migrations.CreateModel(
            name='ProgrammModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, max_length=3000, verbose_name='Описание')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлён')),
            ],
            options={
                'verbose_name': 'Программа',
                'verbose_name_plural': 'Программы',
            },
        ),
        migrations.CreateModel(
            name='ReflowParamModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('programm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reflow_param', to='programm.programmmodel', verbose_name='Программа')),
            ],
            options={
                'verbose_name': 'Параметры оплавления',
                'verbose_name_plural': 'Параметры оплавления',
            },
        ),
        migrations.CreateModel(
            name='SedimentPressureSensorModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_value', models.IntegerField(default=0, verbose_name='Минимальное значение')),
                ('max_value', models.IntegerField(default=0, verbose_name='Максимальное значение')),
                ('programm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sediment_pressure_sensor', to='programm.programmmodel', verbose_name='Программа')),
            ],
            options={
                'verbose_name': 'Датчик давления осадки',
                'verbose_name_plural': 'Датчик давления осадки',
            },
        ),
        migrations.CreateModel(
            name='ReflowSectionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('r_1', models.FloatField(default=0.0, verbose_name='S')),
                ('r_2', models.FloatField(default=0.0, verbose_name='Скорость вперёд')),
                ('r_3', models.FloatField(default=0.0, verbose_name='Скорость назад')),
                ('r_4', models.FloatField(default=0.0, verbose_name='U')),
                ('r_0', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reflow_section', to='programm.reflowparammodel', verbose_name='Параметры оплавления')),
            ],
            options={
                'verbose_name': 'Участок оплавления',
                'verbose_name_plural': 'Участки оплавления',
            },
        ),
        migrations.CreateModel(
            name='PrimaryVoltageSensorModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_value', models.IntegerField(default=0, verbose_name='Минимальное значение')),
                ('max_value', models.IntegerField(default=0, verbose_name='Максимальное значение')),
                ('programm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='primary_voltage_sensor', to='programm.programmmodel', verbose_name='Программа')),
            ],
            options={
                'verbose_name': 'Датчик первичной обмотки',
                'verbose_name_plural': 'Датчик первичнной обмотки',
            },
        ),
        migrations.CreateModel(
            name='PreheatingModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ph_0', models.FloatField(default=0.0, verbose_name='Скорость вперёд')),
                ('ph_1', models.FloatField(default=0.0, verbose_name='Скорость уплотнения')),
                ('ph_2', models.FloatField(default=0.0, verbose_name='Скорость назад')),
                ('ph_3', models.FloatField(default=0.0, verbose_name='Скорость последнего уплотнения')),
                ('ph_4', models.IntegerField(default=0, verbose_name='Время уплотнения')),
                ('ph_5', models.IntegerField(default=0, verbose_name='Время подогрева')),
                ('ph_6', models.IntegerField(default=0, verbose_name='Время паузы')),
                ('ph_7', models.IntegerField(default=0, verbose_name='Число импульсов')),
                ('ph_8', models.IntegerField(default=0, verbose_name='Ток короткого замыкания')),
                ('ph_9', models.IntegerField(default=0, verbose_name='Ток холостого хода')),
                ('ph_10', models.IntegerField(default=0, verbose_name='Напряжение подогрева')),
                ('ph_11', models.IntegerField(default=0, verbose_name='Время осадки с током')),
                ('ph_12', models.FloatField(default=0.0, verbose_name='Величина осадки')),
                ('programm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preheating', to='programm.programmmodel', verbose_name='Программа')),
            ],
            options={
                'verbose_name': 'Подогрев',
                'verbose_name_plural': 'Подогрев',
            },
        ),
        migrations.CreateModel(
            name='PositionSensorModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_value', models.IntegerField(default=0, verbose_name='Минимальное значение')),
                ('max_value', models.IntegerField(default=0, verbose_name='Максимальное значение')),
                ('programm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='position_sensor', to='programm.programmmodel', verbose_name='Программа')),
            ],
            options={
                'verbose_name': 'Датчик положения',
                'verbose_name_plural': 'Датчик положения',
            },
        ),
        migrations.CreateModel(
            name='PKPressureMeterSensorModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_value', models.IntegerField(default=0, verbose_name='Минимальное значение')),
                ('max_value', models.IntegerField(default=0, verbose_name='Максимальное значение')),
                ('programm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pk_pressure_meter_sensor', to='programm.programmmodel', verbose_name='Программа')),
            ],
            options={
                'verbose_name': 'Датчик давления ПК',
                'verbose_name_plural': 'Датчик давления ПК',
            },
        ),
        migrations.CreateModel(
            name='OtherParameterSensorModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_value', models.IntegerField(default=0, verbose_name='Минимальное значение')),
                ('max_value', models.IntegerField(default=0, verbose_name='Максимальное значение')),
                ('oth_0', models.FloatField(default=0.0, verbose_name='Крайнее разведённое положение, мм')),
                ('oth_1', models.FloatField(default=0.0, verbose_name='Крайнее сведённое положение, мм')),
                ('oth_2', models.FloatField(default=0.0, verbose_name='Зона возможного запуска, мм')),
                ('oth_3', models.FloatField(default=0.0, verbose_name='Расстояние между эл. в сведённом положении, мм')),
                ('oth_4', models.FloatField(default=0.0, verbose_name='Путь выключения клапана осадки, мм')),
                ('oth_5', models.FloatField(default=0.0, verbose_name='Уставка контроля положения плиты, мм')),
                ('oth_6', models.FloatField(default=0.0, verbose_name='Уставка наличия проскальзывания, мм')),
                ('oth_7', models.FloatField(default=0.0, verbose_name='Конечное положение при срезке грата, мм')),
                ('oth_8', models.FloatField(default=0.0, verbose_name='Скорость сведения, мс/с')),
                ('oth_9', models.FloatField(default=0.0, verbose_name='Скорость разведения, мс/с')),
                ('oth_10', models.FloatField(default=0.0, verbose_name='Скорость выхода в исходное положение, мс/с')),
                ('oth_11', models.FloatField(default=0.0, verbose_name='Скорость движения в тесте, мс/с')),
                ('oth_12', models.IntegerField(default=0, verbose_name='Напряжение в ручном режиме, %')),
                ('oth_13', models.IntegerField(default=0, verbose_name='Расжим ПК, мс')),
                ('oth_14', models.IntegerField(default=0, verbose_name='Разжим НК, мс')),
                ('oth_15', models.IntegerField(default=0, verbose_name='Время подразжима, мс')),
                ('oth_16', models.IntegerField(default=0, verbose_name='Время котроля осадки, мс')),
                ('oth_17', models.IntegerField(default=0, verbose_name='Время контроля срезки, мс')),
                ('programm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='other_parameter_sensor', to='programm.programmmodel', verbose_name='Программа')),
            ],
            options={
                'verbose_name': 'Параметры других датчиков',
                'verbose_name_plural': 'Параметры других датчиков',
            },
        ),
        migrations.CreateModel(
            name='OilTemperatureSensorModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_value', models.IntegerField(default=0, verbose_name='Минимальное значение')),
                ('max_value', models.IntegerField(default=0, verbose_name='Максимальное значение')),
                ('programm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='oil_temperature_sensor', to='programm.programmmodel', verbose_name='Программа')),
            ],
            options={
                'verbose_name': 'Датчик температуры масла',
                'verbose_name_plural': 'Датчик температуры масла',
            },
        ),
        migrations.CreateModel(
            name='NKPressureMeterSensorModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_value', models.IntegerField(default=0, verbose_name='Минимальное значение')),
                ('max_value', models.IntegerField(default=0, verbose_name='Максимальное значение')),
                ('programm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nk_pressure_meter_sensor', to='programm.programmmodel', verbose_name='Программа')),
            ],
            options={
                'verbose_name': 'Датчик давления НК',
                'verbose_name_plural': 'Датчик давления НК',
            },
        ),
        migrations.CreateModel(
            name='HydraulicPressureSensorModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_value', models.IntegerField(default=0, verbose_name='Минимальное значение')),
                ('max_value', models.IntegerField(default=0, verbose_name='Максимальное значение')),
                ('programm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hydraulic_pressure_sensor', to='programm.programmmodel', verbose_name='Программа')),
            ],
            options={
                'verbose_name': 'Датчик давления гидростанции',
                'verbose_name_plural': 'Датчик давления гидростанции',
            },
        ),
        migrations.CreateModel(
            name='CurrentSensorModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_value', models.IntegerField(default=0, verbose_name='Минимальное значение')),
                ('max_value', models.IntegerField(default=0, verbose_name='Максимальное значение')),
                ('programm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current_sensor', to='programm.programmmodel', verbose_name='Программа')),
            ],
            options={
                'verbose_name': 'Датчик тока',
                'verbose_name_plural': 'Датчик тока',
            },
        ),
        migrations.CreateModel(
            name='CorrectorSectionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('c_1', models.FloatField(default=0.0, verbose_name='Ток коррекции')),
                ('c_2', models.FloatField(default=0.0, verbose_name='Скорость вперёд')),
                ('c_3', models.FloatField(default=0.0, verbose_name='Скорость назад')),
                ('c_4', models.FloatField(default=0.0, verbose_name='Ток КЗ')),
                ('c_0', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='corrector_section', to='programm.correctorparammodel', verbose_name='Параметры корректора')),
            ],
            options={
                'verbose_name': 'Участок коррекции',
                'verbose_name_plural': 'Участки коррекции',
            },
        ),
        migrations.AddField(
            model_name='correctorparammodel',
            name='programm',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='corrector_param', to='programm.programmmodel', verbose_name='Программа'),
        ),
        migrations.CreateModel(
            name='ClampModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cl_0', models.IntegerField(default=0, verbose_name='Давление осадки/зажимов')),
                ('cl_1', models.CharField(blank=True, max_length=100, verbose_name='Источник')),
                ('cl_2', models.IntegerField(default=0, verbose_name='Время проковки')),
                ('cl_3', models.FloatField(default=0.0, verbose_name='Величина разведения')),
                ('cl_4', models.FloatField(default=0.0, verbose_name='Скорость разведения')),
                ('cl_5', models.BooleanField(default=False, verbose_name='Срезка грата')),
                ('cl_6', models.BooleanField(default=False, verbose_name='Осадка')),
                ('programm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clamp', to='programm.programmmodel', verbose_name='Программа')),
            ],
            options={
                'verbose_name': 'Зажим',
                'verbose_name_plural': 'Зажим',
            },
        ),
        migrations.CreateModel(
            name='BurningModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('b_0', models.FloatField(default=0.0, verbose_name='Величина выжигания')),
                ('b_1', models.FloatField(default=0.0, verbose_name='Скорость вперёд')),
                ('b_2', models.FloatField(default=0.0, verbose_name='Скорость назад')),
                ('b_3', models.IntegerField(default=0, verbose_name='Напряжение выжигания')),
                ('b_4', models.IntegerField(default=0, verbose_name='Ток коррекции')),
                ('b_5', models.IntegerField(default=0, verbose_name='Ток остановки')),
                ('b_6', models.IntegerField(default=0, verbose_name='Ток реверса')),
                ('b_7', models.IntegerField(default=0, verbose_name='Ток короткого замыкания')),
                ('programm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='burning', to='programm.programmmodel', verbose_name='Программа')),
            ],
            options={
                'verbose_name': 'Выжигание',
                'verbose_name_plural': 'Выжигание',
            },
        ),
    ]
